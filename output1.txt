Token: Separator                 Lexeme: $
<Rat24S> -> $ <Opt Function Definitions>  $ <Opt Declaration List>  $ <Statement List>  $
Token: Separator                 Lexeme: $
<Opt Function Definitions> -> <Empty>
<Empty> -> Epsilon
Token: Keyword                   Lexeme: integer
<Opt Declaration List> -> <Declaration List>
<Declaration> -> <Qualifier><IDs>
<Qualifier> -> integer
Token: Identifier                Lexeme: c
<IDs> -> <Identifier> <IDs Prime>
Token: Separator                 Lexeme: ,
<IDs Prime> -> <IDs>
Token: Identifier                Lexeme: z
<IDs> -> <Identifier> <IDs Prime>
Token: Separator                 Lexeme: ;
<IDs Prime> -> Epsilon
Token: Separator                 Lexeme: $
<Declaration List Prime> -> Epsilon
Token: Identifier                Lexeme: c
<Statement List> -> <Statement><Statement List Prime>
<Statement> -> <Assign>
<Assign> -> Identifier = <Expression>;
Token: Operator                  Lexeme: =
Token: Integer                   Lexeme: 10
<Expression> -> <Term><Expression Prime>
<Term> -> <Factor><Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
Token: Operator                  Lexeme: -
<Term Prime> -> Epsilon
<Expression Prime> -> - <Term><Expression Prime>
Token: Integer                   Lexeme: 5
<Term> -> <Factor><Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
Token: Separator                 Lexeme: ;
<Term Prime> -> Epsilon
<Expression Prime> -> Epsilon
Token: Keyword                   Lexeme: scan
<Statement List Prime> -> <Statement List>
<Statement List> -> <Statement><Statement List Prime>
<Statement> -> <Scan>
<Scan> -> scan(<IDs>);
Token: Separator                 Lexeme: (
Token: Identifier                Lexeme: z
Token: Separator                 Lexeme: )
Token: Separator                 Lexeme: ;
Token: Keyword                   Lexeme: if
<Statement List Prime> -> <Statement List>
<Statement List> -> <Statement><Statement List Prime>
<Statement> -> <If>
<If> -> if (<Condition>) <Statement> <If Prime>
Token: Separator                 Lexeme: (
Token: Identifier                Lexeme: z
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term><Expression Prime>
<Term> -> <Factor><Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
Token: Operator                  Lexeme: >
<Term Prime> -> Epsilon
<Expression Prime> -> Epsilon
<Relop> -> >
Token: Identifier                Lexeme: c
<Expression> -> <Term><Expression Prime>
<Term> -> <Factor><Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
Token: Separator                 Lexeme: )
<Term Prime> -> Epsilon
<Expression Prime> -> Epsilon
Token: Separator                 Lexeme: {
<Compound>> -> <Compound>
<Compound> -> {<Statement List>}
Token: Keyword                   Lexeme: print
<Body> -> {<Statement List>}
<Statement List> -> <Statement><Statement List Prime>
<Statement> -> <Print>
<Print> -> print(<Expression>)
Token: Separator                 Lexeme: (
Token: Identifier                Lexeme: z
<Expression> -> <Term><Expression Prime>
<Term> -> <Factor><Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier>
Token: Separator                 Lexeme: )
<Term Prime> -> Epsilon
<Expression Prime> -> Epsilon
Token: Separator                 Lexeme: ;
Token: Separator                 Lexeme: }
<Statement List Prime> -> <Empty>
<Empty> -> Epsilon
Token: Keyword                   Lexeme: endif
<If Prime> -> endif
Token: Separator                 Lexeme: $
<Statement List Prime> -> <Empty>
<Empty> -> Epsilon

| ~~~        End of File Reached      ~~~ |
| ~~~ Syntax Analyzer Found No Errors ~~~ |